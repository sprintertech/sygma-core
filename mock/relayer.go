// Code generated by MockGen. DO NOT EDIT.
// Source: ./relayer/relayer.go
//
// Generated by this command:
//
//	mockgen -destination=./mock/relayer.go -source=./relayer/relayer.go -package mock
//
// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	message "github.com/sygmaprotocol/sygma-core/relayer/message"
	proposal "github.com/sygmaprotocol/sygma-core/relayer/proposal"
	gomock "go.uber.org/mock/gomock"
)

// MockRelayedChain is a mock of RelayedChain interface.
type MockRelayedChain[T any] struct {
	ctrl     *gomock.Controller
	recorder *MockRelayedChainMockRecorder[T]
}

// MockRelayedChainMockRecorder is the mock recorder for MockRelayedChain.
type MockRelayedChainMockRecorder[T any] struct {
	mock *MockRelayedChain[T]
}

// NewMockRelayedChain creates a new mock instance.
func NewMockRelayedChain[T any](ctrl *gomock.Controller) *MockRelayedChain[T] {
	mock := &MockRelayedChain[T]{ctrl: ctrl}
	mock.recorder = &MockRelayedChainMockRecorder[T]{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRelayedChain[T]) EXPECT() *MockRelayedChainMockRecorder[T] {
	return m.recorder
}

// DomainID mocks base method.
func (m *MockRelayedChain[T]) DomainID() uint8 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DomainID")
	ret0, _ := ret[0].(uint8)
	return ret0
}

// DomainID indicates an expected call of DomainID.
func (mr *MockRelayedChainMockRecorder[T]) DomainID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DomainID", reflect.TypeOf((*MockRelayedChain[T])(nil).DomainID))
}

// PollEvents mocks base method.
func (m *MockRelayedChain[T]) PollEvents(ctx context.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "PollEvents", ctx)
}

// PollEvents indicates an expected call of PollEvents.
func (mr *MockRelayedChainMockRecorder[T]) PollEvents(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PollEvents", reflect.TypeOf((*MockRelayedChain[T])(nil).PollEvents), ctx)
}

// ReceiveMessage mocks base method.
func (m_2 *MockRelayedChain[T]) ReceiveMessage(m *message.Message[T]) (*proposal.Proposal[T], error) {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "ReceiveMessage", m)
	ret0, _ := ret[0].(*proposal.Proposal[T])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReceiveMessage indicates an expected call of ReceiveMessage.
func (mr *MockRelayedChainMockRecorder[T]) ReceiveMessage(m any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReceiveMessage", reflect.TypeOf((*MockRelayedChain[T])(nil).ReceiveMessage), m)
}

// Write mocks base method.
func (m *MockRelayedChain[T]) Write(proposals []*proposal.Proposal[T]) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Write", proposals)
	ret0, _ := ret[0].(error)
	return ret0
}

// Write indicates an expected call of Write.
func (mr *MockRelayedChainMockRecorder[T]) Write(proposals any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MockRelayedChain[T])(nil).Write), proposals)
}
