// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/sygmaprotocol/sygma-core/chains/substrate/listener (interfaces: ChainConnection)
//
// Generated by this command:
//
//	mockgen -destination=./mock/substrateListener.go -package mock github.com/sygmaprotocol/sygma-core/chains/substrate/listener ChainConnection
//
// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	types "github.com/centrifuge/go-substrate-rpc-client/v4/types"
	gomock "go.uber.org/mock/gomock"
)

// MockChainConnection is a mock of ChainConnection interface.
type MockChainConnection struct {
	ctrl     *gomock.Controller
	recorder *MockChainConnectionMockRecorder
}

// MockChainConnectionMockRecorder is the mock recorder for MockChainConnection.
type MockChainConnectionMockRecorder struct {
	mock *MockChainConnection
}

// NewMockChainConnection creates a new mock instance.
func NewMockChainConnection(ctrl *gomock.Controller) *MockChainConnection {
	mock := &MockChainConnection{ctrl: ctrl}
	mock.recorder = &MockChainConnectionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockChainConnection) EXPECT() *MockChainConnectionMockRecorder {
	return m.recorder
}

// GetBlock mocks base method.
func (m *MockChainConnection) GetBlock(arg0 types.Hash) (*types.SignedBlock, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlock", arg0)
	ret0, _ := ret[0].(*types.SignedBlock)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlock indicates an expected call of GetBlock.
func (mr *MockChainConnectionMockRecorder) GetBlock(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlock", reflect.TypeOf((*MockChainConnection)(nil).GetBlock), arg0)
}

// GetFinalizedHead mocks base method.
func (m *MockChainConnection) GetFinalizedHead() (types.Hash, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFinalizedHead")
	ret0, _ := ret[0].(types.Hash)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFinalizedHead indicates an expected call of GetFinalizedHead.
func (mr *MockChainConnectionMockRecorder) GetFinalizedHead() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFinalizedHead", reflect.TypeOf((*MockChainConnection)(nil).GetFinalizedHead))
}
